.....................................................................................
EXAMPLE OF HIGHER ORDER FUNCTION.
.....................................................................................
1. Here we have a function, addTwo(), that adds 2 to whatever is passed into it. 
Below that, we’ve created what will be a higher-order function, 
checkConsistentOutput(). The purpose of the higher-order function will be to check 
the work of addTwo(). Let’s get started!

To begin, inside the body of checkConsistentOutput(), declare two variables: 
checkA and checkB:

checkA stores the sum val plus 2.
checkB stores the invocation of the func callback, with val as the argument.
Checkpoint 2 Passed

Stuck? Get a hint
2. Next, below the variables, write a conditional statement that checks if the 
value of checkA is equal to the value checkB. If true, return the result of the 
callback function. If false, return the string 'inconsistent results'.

Checkpoint 3 Passed

Stuck? Get a hint
3.Finally, using console.log(), log the invocation of checkConsistentOutput() 
with two arguments: the addTwo() function and any number.

Checkpoint 4 Passed

Stuck? Get a hint

................................................................................
const addTwo = num => {
  return num + 2;
}

const checkConsistentOutput = (func, val) => {
  const checkA = val + 2;
  const checkB = func(val)
  if(checkA === checkB) {
    return checkA;
  } else {
    return 'inconsistent results';
  }
}
console.log(checkConsistentOutput(addTwo, 3));

..................................................................................
This code defines two functions and then uses them to demonstrate the concept of 
consistent output.

The first function is called addTwo. It is defined using arrow function syntax and 
takes a single parameter num. Inside the function, it adds 2 to the input num and 
returns the result.

The second function is called checkConsistentOutput. It also uses arrow function 
syntax and takes two parameters: func and val. func represents a function, and val 
is a value that will be passed as an argument to func.

Inside the checkConsistentOutput function, two variables are declared:
checkA and checkB. checkA is assigned the value of val + 2, which means it adds 2 
to the val parameter. checkB is assigned the result of calling the func function 
with val as its argument.

The function then checks if checkA is equal to checkB. If they are equal, it means 
that adding 2 to the input value val directly or using the func function with the 
same input val both yield the same result. In that case, the function returns checkA.

If checkA and checkB are not equal, it means that adding 2 to val directly and using 
the func function with the same input val produce different results. In this case, 
the function returns the string 'inconsistent results'.

Finally, the checkConsistentOutput function is called with addTwo as the func 
argument and 3 as the val argument. The result of the function call is then 
printed to the console using console.log.

In this specific case, since addTwo simply adds 2 to the input, both checkA and 
checkB will be equal to 5. Therefore, the function will return 5, and you will 
see 5 printed to the console.
..................................................................................

Yes, the checkConsistentOutput function is an example of a higher-order function. 
A higher-order function is a function that takes one or more functions as arguments 
and/or returns a function as its result.

In the code you provided, checkConsistentOutput takes two parameters: func and val. 
The func parameter is a function that will be passed as an argument. This makes 
checkConsistentOutput a higher-order function because it accepts another function 
as one of its parameters.

Inside checkConsistentOutput, the func parameter is invoked by calling func(val). 
This demonstrates how the function func is being used within checkConsistentOutput.

Therefore, checkConsistentOutput is an example of a higher-order function since it 
operates on another function (func) by taking it as an argument.



